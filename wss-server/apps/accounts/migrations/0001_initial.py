# Generated by Django 4.1.7 on 2023-03-09 16:04

import apps.accounts.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='VerifyCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=50)),
                ('code_type', models.CharField(choices=[('verify_email', 'verify_email'), ('reset_password', 'reset_password')], default='verify_email', max_length=20)),
                ('send_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiration_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'verify_code',
                'verbose_name_plural': 'verify_code',
                'ordering': ['-send_time'],
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(help_text='Required. 150 characters or fewer. Letters only.', max_length=150, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()])),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, max_length=200, null=True, upload_to='accounts/avatar')),
                ('oauth_id', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='Oauth-id')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is verified')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'users',
                'verbose_name_plural': 'users',
                'ordering': ['-create_time'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.accounts.models.UserCustomManager()),
            ],
        ),
    ]
